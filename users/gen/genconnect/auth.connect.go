// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/viago/users/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthName is the fully-qualified name of the Auth service.
	AuthName = "users.Auth"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthCreateUserProcedure is the fully-qualified name of the Auth's CreateUser RPC.
	AuthCreateUserProcedure = "/users.Auth/CreateUser"
	// AuthGetUserProcedure is the fully-qualified name of the Auth's GetUser RPC.
	AuthGetUserProcedure = "/users.Auth/GetUser"
	// AuthUpdateUserProcedure is the fully-qualified name of the Auth's UpdateUser RPC.
	AuthUpdateUserProcedure = "/users.Auth/UpdateUser"
	// AuthDeleteUserProcedure is the fully-qualified name of the Auth's DeleteUser RPC.
	AuthDeleteUserProcedure = "/users.Auth/DeleteUser"
	// AuthLoginUserProcedure is the fully-qualified name of the Auth's LoginUser RPC.
	AuthLoginUserProcedure = "/users.Auth/LoginUser"
	// AuthLogoutUserProcedure is the fully-qualified name of the Auth's LogoutUser RPC.
	AuthLogoutUserProcedure = "/users.Auth/LogoutUser"
)

// AuthClient is a client for the users.Auth service.
type AuthClient interface {
	CreateUser(context.Context, *connect_go.Request[gen.CreateUserRequest]) (*connect_go.Response[gen.CreateUserResponse], error)
	GetUser(context.Context, *connect_go.Request[gen.GetUserRequest]) (*connect_go.Response[gen.GetUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[gen.UpdateUserRequest]) (*connect_go.Response[gen.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[gen.DeleteUserRequest]) (*connect_go.Response[gen.DeleteUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[gen.LoginUserRequest]) (*connect_go.Response[gen.LoginUserResponse], error)
	LogoutUser(context.Context, *connect_go.Request[gen.LogoutUserRequest]) (*connect_go.Response[gen.LogoutUserResponse], error)
}

// NewAuthClient constructs a client for the users.Auth service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authClient{
		createUser: connect_go.NewClient[gen.CreateUserRequest, gen.CreateUserResponse](
			httpClient,
			baseURL+AuthCreateUserProcedure,
			opts...,
		),
		getUser: connect_go.NewClient[gen.GetUserRequest, gen.GetUserResponse](
			httpClient,
			baseURL+AuthGetUserProcedure,
			opts...,
		),
		updateUser: connect_go.NewClient[gen.UpdateUserRequest, gen.UpdateUserResponse](
			httpClient,
			baseURL+AuthUpdateUserProcedure,
			opts...,
		),
		deleteUser: connect_go.NewClient[gen.DeleteUserRequest, gen.DeleteUserResponse](
			httpClient,
			baseURL+AuthDeleteUserProcedure,
			opts...,
		),
		loginUser: connect_go.NewClient[gen.LoginUserRequest, gen.LoginUserResponse](
			httpClient,
			baseURL+AuthLoginUserProcedure,
			opts...,
		),
		logoutUser: connect_go.NewClient[gen.LogoutUserRequest, gen.LogoutUserResponse](
			httpClient,
			baseURL+AuthLogoutUserProcedure,
			opts...,
		),
	}
}

// authClient implements AuthClient.
type authClient struct {
	createUser *connect_go.Client[gen.CreateUserRequest, gen.CreateUserResponse]
	getUser    *connect_go.Client[gen.GetUserRequest, gen.GetUserResponse]
	updateUser *connect_go.Client[gen.UpdateUserRequest, gen.UpdateUserResponse]
	deleteUser *connect_go.Client[gen.DeleteUserRequest, gen.DeleteUserResponse]
	loginUser  *connect_go.Client[gen.LoginUserRequest, gen.LoginUserResponse]
	logoutUser *connect_go.Client[gen.LogoutUserRequest, gen.LogoutUserResponse]
}

// CreateUser calls users.Auth.CreateUser.
func (c *authClient) CreateUser(ctx context.Context, req *connect_go.Request[gen.CreateUserRequest]) (*connect_go.Response[gen.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls users.Auth.GetUser.
func (c *authClient) GetUser(ctx context.Context, req *connect_go.Request[gen.GetUserRequest]) (*connect_go.Response[gen.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls users.Auth.UpdateUser.
func (c *authClient) UpdateUser(ctx context.Context, req *connect_go.Request[gen.UpdateUserRequest]) (*connect_go.Response[gen.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls users.Auth.DeleteUser.
func (c *authClient) DeleteUser(ctx context.Context, req *connect_go.Request[gen.DeleteUserRequest]) (*connect_go.Response[gen.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// LoginUser calls users.Auth.LoginUser.
func (c *authClient) LoginUser(ctx context.Context, req *connect_go.Request[gen.LoginUserRequest]) (*connect_go.Response[gen.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// LogoutUser calls users.Auth.LogoutUser.
func (c *authClient) LogoutUser(ctx context.Context, req *connect_go.Request[gen.LogoutUserRequest]) (*connect_go.Response[gen.LogoutUserResponse], error) {
	return c.logoutUser.CallUnary(ctx, req)
}

// AuthHandler is an implementation of the users.Auth service.
type AuthHandler interface {
	CreateUser(context.Context, *connect_go.Request[gen.CreateUserRequest]) (*connect_go.Response[gen.CreateUserResponse], error)
	GetUser(context.Context, *connect_go.Request[gen.GetUserRequest]) (*connect_go.Response[gen.GetUserResponse], error)
	UpdateUser(context.Context, *connect_go.Request[gen.UpdateUserRequest]) (*connect_go.Response[gen.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect_go.Request[gen.DeleteUserRequest]) (*connect_go.Response[gen.DeleteUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[gen.LoginUserRequest]) (*connect_go.Response[gen.LoginUserResponse], error)
	LogoutUser(context.Context, *connect_go.Request[gen.LogoutUserRequest]) (*connect_go.Response[gen.LogoutUserResponse], error)
}

// NewAuthHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthHandler(svc AuthHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AuthCreateUserProcedure, connect_go.NewUnaryHandler(
		AuthCreateUserProcedure,
		svc.CreateUser,
		opts...,
	))
	mux.Handle(AuthGetUserProcedure, connect_go.NewUnaryHandler(
		AuthGetUserProcedure,
		svc.GetUser,
		opts...,
	))
	mux.Handle(AuthUpdateUserProcedure, connect_go.NewUnaryHandler(
		AuthUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	))
	mux.Handle(AuthDeleteUserProcedure, connect_go.NewUnaryHandler(
		AuthDeleteUserProcedure,
		svc.DeleteUser,
		opts...,
	))
	mux.Handle(AuthLoginUserProcedure, connect_go.NewUnaryHandler(
		AuthLoginUserProcedure,
		svc.LoginUser,
		opts...,
	))
	mux.Handle(AuthLogoutUserProcedure, connect_go.NewUnaryHandler(
		AuthLogoutUserProcedure,
		svc.LogoutUser,
		opts...,
	))
	return "/users.Auth/", mux
}

// UnimplementedAuthHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthHandler struct{}

func (UnimplementedAuthHandler) CreateUser(context.Context, *connect_go.Request[gen.CreateUserRequest]) (*connect_go.Response[gen.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.CreateUser is not implemented"))
}

func (UnimplementedAuthHandler) GetUser(context.Context, *connect_go.Request[gen.GetUserRequest]) (*connect_go.Response[gen.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.GetUser is not implemented"))
}

func (UnimplementedAuthHandler) UpdateUser(context.Context, *connect_go.Request[gen.UpdateUserRequest]) (*connect_go.Response[gen.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.UpdateUser is not implemented"))
}

func (UnimplementedAuthHandler) DeleteUser(context.Context, *connect_go.Request[gen.DeleteUserRequest]) (*connect_go.Response[gen.DeleteUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.DeleteUser is not implemented"))
}

func (UnimplementedAuthHandler) LoginUser(context.Context, *connect_go.Request[gen.LoginUserRequest]) (*connect_go.Response[gen.LoginUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.LoginUser is not implemented"))
}

func (UnimplementedAuthHandler) LogoutUser(context.Context, *connect_go.Request[gen.LogoutUserRequest]) (*connect_go.Response[gen.LogoutUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.Auth.LogoutUser is not implemented"))
}
